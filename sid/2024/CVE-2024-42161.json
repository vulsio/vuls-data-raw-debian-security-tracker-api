{
	"id": "CVE-2024-42161",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  bpf: Avoid uninitialized value in BPF_CORE_READ_BITFIELD  [Changes from V1:  - Use a default branch in the switch statement to initialize `val'.]  GCC warns that `val' may be used uninitialized in the BPF_CRE_READ_BITFIELD macro, defined in bpf_core_read.h as:  \t[...] \tunsigned long long val;\t\t\t\t\t\t      \\ \t[...]\t\t\t\t\t\t\t\t      \\ \tswitch (__CORE_RELO(s, field, BYTE_SIZE)) {\t\t\t      \\ \tcase 1: val = *(const unsigned char *)p; break;\t\t\t      \\ \tcase 2: val = *(const unsigned short *)p; break;\t\t      \\ \tcase 4: val = *(const unsigned int *)p; break;\t\t\t      \\ \tcase 8: val = *(const unsigned long long *)p; break;\t\t      \\         }       \t\t\t\t\t\t\t      \\ \t[...] \tval;\t\t\t\t\t\t\t\t      \\ \t}\t\t\t\t\t\t\t\t      \\  This patch adds a default entry in the switch statement that sets `val' to zero in order to avoid the warning, and random values to be used in case __builtin_preserve_field_info returns unexpected values for BPF_FIELD_BYTE_SIZE.  Tested in bpf-next master. No regressions.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "6.9.9-1",
			"repository": [
				{
					"name": "sid",
					"version": "6.12.11-1"
				}
			]
		}
	]
}

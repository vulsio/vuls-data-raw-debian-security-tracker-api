{
	"id": "CVE-2024-57941",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  netfs: Fix the (non-)cancellation of copy when cache is temporarily disabled  When the caching for a cookie is temporarily disabled (e.g. due to a DIO write on that file), future copying to the cache for that file is disabled until all fds open on that file are closed.  However, if netfslib is using the deprecated PG_private_2 method (such as is currently used by ceph), and decides it wants to copy to the cache, netfs_advance_write() will just bail at the first check seeing that the cache stream is unavailable, and indicate that it dealt with all the content.  This means that we have no subrequests to provide notifications to drive the state machine or even to pin the request and the request just gets discarded, leaving the folios with PG_private_2 set.  Fix this by jumping directly to cancel the request if the cache is not available.  That way, we don't remove mark3 from the folio_queue list and netfs_pgpriv2_cancel() will clean up the folios.  This was found by running the generic/013 xfstest against ceph with an active cache and the \"-o fsc\" option passed to ceph.  That would usually hang",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "6.12.10-1",
			"repository": [
				{
					"name": "sid",
					"version": "6.12.13-1"
				}
			]
		}
	]
}

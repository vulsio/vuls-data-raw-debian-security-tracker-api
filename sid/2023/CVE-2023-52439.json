{
	"id": "CVE-2023-52439",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  uio: Fix use-after-free in uio_open  core-1\t\t\t\tcore-2 ------------------------------------------------------- uio_unregister_device\t\tuio_open \t\t\t\tidev = idr_find() device_unregister(&idev->dev) put_device(&idev->dev) uio_device_release \t\t\t\tget_device(&idev->dev) kfree(idev) uio_free_minor(minor) \t\t\t\tuio_release \t\t\t\tput_device(&idev->dev) \t\t\t\tkfree(idev) -------------------------------------------------------  In the core-1 uio_unregister_device(), the device_unregister will kfree idev when the idev->dev kobject ref is 1. But after core-1 device_unregister, put_device and before doing kfree, the core-2 may get_device. Then: 1. After core-1 kfree idev, the core-2 will do use-after-free for idev. 2. When core-2 do uio_release and put_device, the idev will be double    freed.  To address this issue, we can get idev atomic & inc idev reference with minor_lock.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "6.6.13-1",
			"repository": [
				{
					"name": "sid",
					"version": "6.9.11-1"
				}
			]
		}
	]
}

{
	"id": "CVE-2023-52836",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  locking/ww_mutex/test: Fix potential workqueue corruption  In some cases running with the test-ww_mutex code, I was seeing odd behavior where sometimes it seemed flush_workqueue was returning before all the work threads were finished.  Often this would cause strange crashes as the mutexes would be freed while they were being used.  Looking at the code, there is a lifetime problem as the controlling thread that spawns the work allocates the \"struct stress\" structures that are passed to the workqueue threads. Then when the workqueue threads are finished, they free the stress struct that was passed to them.  Unfortunately the workqueue work_struct node is in the stress struct. Which means the work_struct is freed before the work thread returns and while flush_workqueue is waiting.  It seems like a better idea to have the controlling thread both allocate and free the stress structures, so that we can be sure we don't corrupt the workqueue by freeing the structure prematurely.  So this patch reworks the test to do so, and with this change I no longer see the early flush_workqueue returns.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "6.6.8-1",
			"repository": [
				{
					"name": "sid",
					"version": "6.9.12-1"
				}
			]
		}
	]
}

{
	"id": "CVE-2022-48862",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  vhost: fix hung thread due to erroneous iotlb entries  In vhost_iotlb_add_range_ctx(), range size can overflow to 0 when start is 0 and last is ULONG_MAX. One instance where it can happen is when userspace sends an IOTLB message with iova=size=uaddr=0 (vhost_process_iotlb_msg). So, an entry with size = 0, start = 0, last = ULONG_MAX ends up in the iotlb. Next time a packet is sent, iotlb_access_ok() loops indefinitely due to that erroneous entry.  \tCall Trace: \t <TASK> \t iotlb_access_ok+0x21b/0x3e0 drivers/vhost/vhost.c:1340 \t vq_meta_prefetch+0xbc/0x280 drivers/vhost/vhost.c:1366 \t vhost_transport_do_send_pkt+0xe0/0xfd0 drivers/vhost/vsock.c:104 \t vhost_worker+0x23d/0x3d0 drivers/vhost/vhost.c:372 \t kthread+0x2e9/0x3a0 kernel/kthread.c:377 \t ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:295 \t </TASK>  Reported by syzbot at: \thttps://syzkaller.appspot.com/bug?extid=0abd373e2e50d704db87  To fix this, do two things:  1. Return -EINVAL in vhost_chr_write_iter() when userspace asks to map    a range with size 0. 2. Fix vhost_iotlb_add_range_ctx() to handle the range [0, ULONG_MAX]    by splitting it into two entries.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "5.16.18-1",
			"repository": [
				{
					"name": "sid",
					"version": "6.10.3-1"
				}
			]
		}
	]
}

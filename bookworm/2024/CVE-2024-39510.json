{
	"id": "CVE-2024-39510",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  cachefiles: fix slab-use-after-free in cachefiles_ondemand_daemon_read()  We got the following issue in a fuzz test of randomly issuing the restore command:  ================================================================== BUG: KASAN: slab-use-after-free in cachefiles_ondemand_daemon_read+0xb41/0xb60 Read of size 8 at addr ffff888122e84088 by task ondemand-04-dae/963  CPU: 13 PID: 963 Comm: ondemand-04-dae Not tainted 6.8.0-dirty #564 Call Trace:  kasan_report+0x93/0xc0  cachefiles_ondemand_daemon_read+0xb41/0xb60  vfs_read+0x169/0xb50  ksys_read+0xf5/0x1e0  Allocated by task 116:  kmem_cache_alloc+0x140/0x3a0  cachefiles_lookup_cookie+0x140/0xcd0  fscache_cookie_state_machine+0x43c/0x1230  [...]  Freed by task 792:  kmem_cache_free+0xfe/0x390  cachefiles_put_object+0x241/0x480  fscache_cookie_state_machine+0x5c8/0x1230  [...] ==================================================================  Following is the process that triggers the issue:       mount  |   daemon_thread1    |    daemon_thread2 ------------------------------------------------------------ cachefiles_withdraw_cookie  cachefiles_ondemand_clean_object(object)   cachefiles_ondemand_send_req    REQ_A = kzalloc(sizeof(*req) + data_len)    wait_for_completion(&REQ_A->done)              cachefiles_daemon_read              cachefiles_ondemand_daemon_read               REQ_A = cachefiles_ondemand_select_req               msg->object_id = req->object->ondemand->ondemand_id                                   ------ restore ------                                   cachefiles_ondemand_restore                                   xas_for_each(&xas, req, ULONG_MAX)                                    xas_set_mark(&xas, CACHEFILES_REQ_NEW)                                    cachefiles_daemon_read                                    cachefiles_ondemand_daemon_read                                     REQ_A = cachefiles_ondemand_select_req               copy_to_user(_buffer, msg, n)                xa_erase(&cache->reqs, id)                complete(&REQ_A->done)               ------ close(fd) ------               cachefiles_ondemand_fd_release                cachefiles_put_object  cachefiles_put_object   kmem_cache_free(cachefiles_object_jar, object)                                     REQ_A->object->ondemand->ondemand_id                                      // object UAF !!!  When we see the request within xa_lock, req->object must not have been freed yet, so grab the reference count of object before xa_unlock to avoid the above issue.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "6.1.99-1",
			"repository": [
				{
					"name": "bookworm",
					"version": "6.1.94-1"
				},
				{
					"name": "bookworm-security",
					"version": "6.1.99-1"
				}
			]
		}
	]
}

{
	"id": "CVE-2024-26923",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  af_unix: Fix garbage collector racing against connect()  Garbage collector does not take into account the risk of embryo getting enqueued during the garbage collection. If such embryo has a peer that carries SCM_RIGHTS, two consecutive passes of scan_children() may see a different set of children. Leading to an incorrectly elevated inflight count, and then a dangling pointer within the gc_inflight_list.  sockets are AF_UNIX/SOCK_STREAM S is an unconnected socket L is a listening in-flight socket bound to addr, not in fdtable V's fd will be passed via sendmsg(), gets inflight count bumped  connect(S, addr)\tsendmsg(S, [V]); close(V)\t__unix_gc() ----------------\t-------------------------\t-----------  NS = unix_create1() skb1 = sock_wmalloc(NS) L = unix_find_other(addr) unix_state_lock(L) unix_peer(S) = NS \t\t\t// V count=1 inflight=0   \t\t\tNS = unix_peer(S)  \t\t\tskb2 = sock_alloc() \t\t\tskb_queue_tail(NS, skb2[V])  \t\t\t// V became in-flight \t\t\t// V count=2 inflight=1  \t\t\tclose(V)  \t\t\t// V count=1 inflight=1 \t\t\t// GC candidate condition met  \t\t\t\t\t\tfor u in gc_inflight_list: \t\t\t\t\t\t  if (total_refs == inflight_refs) \t\t\t\t\t\t    add u to gc_candidates  \t\t\t\t\t\t// gc_candidates={L, V}  \t\t\t\t\t\tfor u in gc_candidates: \t\t\t\t\t\t  scan_children(u, dec_inflight)  \t\t\t\t\t\t// embryo (skb1) was not \t\t\t\t\t\t// reachable from L yet, so V's \t\t\t\t\t\t// inflight remains unchanged __skb_queue_tail(L, skb1) unix_state_unlock(L) \t\t\t\t\t\tfor u in gc_candidates: \t\t\t\t\t\t  if (u.inflight) \t\t\t\t\t\t    scan_children(u, inc_inflight_move_tail)  \t\t\t\t\t\t// V count=1 inflight=2 (!)  If there is a GC-candidate listening socket, lock/unlock its state. This makes GC wait until the end of any ongoing connect() to that socket. After flipping the lock, a possibly SCM-laden embryo is already enqueued. And if there is another embryo coming, it can not possibly carry SCM_RIGHTS. At this point, unix_inflight() can not happen because unix_gc_lock is already taken. Inflight graph remains unaffected.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "6.1.90-1",
			"repository": [
				{
					"name": "bookworm",
					"version": "6.1.123-1"
				},
				{
					"name": "bookworm-security",
					"version": "6.1.128-1"
				}
			]
		}
	]
}

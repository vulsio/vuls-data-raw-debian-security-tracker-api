{
	"id": "CVE-2022-48892",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  sched/core: Fix use-after-free bug in dup_user_cpus_ptr()  Since commit 07ec77a1d4e8 (\"sched: Allow task CPU affinity to be restricted on asymmetric systems\"), the setting and clearing of user_cpus_ptr are done under pi_lock for arm64 architecture. However, dup_user_cpus_ptr() accesses user_cpus_ptr without any lock protection. Since sched_setaffinity() can be invoked from another process, the process being modified may be undergoing fork() at the same time.  When racing with the clearing of user_cpus_ptr in __set_cpus_allowed_ptr_locked(), it can lead to user-after-free and possibly double-free in arm64 kernel.  Commit 8f9ea86fdf99 (\"sched: Always preserve the user requested cpumask\") fixes this problem as user_cpus_ptr, once set, will never be cleared in a task's lifetime. However, this bug was re-introduced in commit 851a723e45d1 (\"sched: Always clear user_cpus_ptr in do_set_cpus_allowed()\") which allows the clearing of user_cpus_ptr in do_set_cpus_allowed(). This time, it will affect all arches.  Fix this bug by always clearing the user_cpus_ptr of the newly cloned/forked task before the copying process starts and check the user_cpus_ptr state of the source task under pi_lock.  Note to stable, this patch won't be applicable to stable releases. Just copy the new dup_user_cpus_ptr() function over.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "6.1.7-1",
			"repository": [
				{
					"name": "bookworm",
					"version": "6.1.106-3"
				},
				{
					"name": "bookworm-security",
					"version": "6.1.112-1"
				}
			]
		}
	]
}

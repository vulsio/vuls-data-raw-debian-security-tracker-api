{
	"id": "CVE-2023-52592",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  libbpf: Fix NULL pointer dereference in bpf_object__collect_prog_relos  An issue occurred while reading an ELF file in libbpf.c during fuzzing:  \tProgram received signal SIGSEGV, Segmentation fault. \t0x0000000000958e97 in bpf_object.collect_prog_relos () at libbpf.c:4206 \t4206 in libbpf.c \t(gdb) bt \t#0 0x0000000000958e97 in bpf_object.collect_prog_relos () at libbpf.c:4206 \t#1 0x000000000094f9d6 in bpf_object.collect_relos () at libbpf.c:6706 \t#2 0x000000000092bef3 in bpf_object_open () at libbpf.c:7437 \t#3 0x000000000092c046 in bpf_object.open_mem () at libbpf.c:7497 \t#4 0x0000000000924afa in LLVMFuzzerTestOneInput () at fuzz/bpf-object-fuzzer.c:16 \t#5 0x000000000060be11 in testblitz_engine::fuzzer::Fuzzer::run_one () \t#6 0x000000000087ad92 in tracing::span::Span::in_scope () \t#7 0x00000000006078aa in testblitz_engine::fuzzer::util::walkdir () \t#8 0x00000000005f3217 in testblitz_engine::entrypoint::main::{{closure}} () \t#9 0x00000000005f2601 in main () \t(gdb)  scn_data was null at this code(tools/lib/bpf/src/libbpf.c):  \tif (rel->r_offset % BPF_INSN_SZ || rel->r_offset >= scn_data->d_size) {  The scn_data is derived from the code above:  \tscn = elf_sec_by_idx(obj, sec_idx); \tscn_data = elf_sec_data(obj, scn);  \trelo_sec_name = elf_sec_str(obj, shdr->sh_name); \tsec_name = elf_sec_name(obj, scn); \tif (!relo_sec_name || !sec_name)// don't check whether scn_data is NULL \t\treturn -EINVAL;  In certain special scenarios, such as reading a malformed ELF file, it is possible that scn_data may be a null pointer",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "open",
			"urgency": "not yet assigned",
			"repository": [
				{
					"name": "buster-security",
					"version": "4.19.304-1"
				},
				{
					"name": "buster",
					"version": "4.19.249-2"
				}
			]
		}
	]
}

{
	"id": "CVE-2024-39506",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  liquidio: Adjust a NULL pointer handling path in lio_vf_rep_copy_packet  In lio_vf_rep_copy_packet() pg_info->page is compared to a NULL value, but then it is unconditionally passed to skb_add_rx_frag() which looks strange and could lead to null pointer dereference.  lio_vf_rep_copy_packet() call trace looks like: \tocteon_droq_process_packets \t octeon_droq_fast_process_packets \t  octeon_droq_dispatch_pkt \t   octeon_create_recv_info \t    ...search in the dispatch_list... \t     ->disp_fn(rdisp->rinfo, ...) \t      lio_vf_rep_pkt_recv(struct octeon_recv_info *recv_info, ...) In this path there is no code which sets pg_info->page to NULL. So this check looks unneeded and doesn't solve potential problem. But I guess the author had reason to add a check and I have no such card and can't do real test. In addition, the code in the function liquidio_push_packet() in liquidio/lio_core.c does exactly the same.  Based on this, I consider the most acceptable compromise solution to adjust this issue by moving skb_add_rx_frag() into conditional scope.  Found by Linux Verification Center (linuxtesting.org) with SVACE.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "6.9.7-1",
			"repository": [
				{
					"name": "trixie",
					"version": "6.12.12-1"
				}
			]
		}
	]
}

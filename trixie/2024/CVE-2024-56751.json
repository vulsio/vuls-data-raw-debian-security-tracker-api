{
	"id": "CVE-2024-56751",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  ipv6: release nexthop on device removal  The CI is hitting some aperiodic hangup at device removal time in the pmtu.sh self-test:  unregister_netdevice: waiting for veth_A-R1 to become free. Usage count = 6 ref_tracker: veth_A-R1@ffff888013df15d8 has 1/5 users at \tdst_init+0x84/0x4a0 \tdst_alloc+0x97/0x150 \tip6_dst_alloc+0x23/0x90 \tip6_rt_pcpu_alloc+0x1e6/0x520 \tip6_pol_route+0x56f/0x840 \tfib6_rule_lookup+0x334/0x630 \tip6_route_output_flags+0x259/0x480 \tip6_dst_lookup_tail.constprop.0+0x5c2/0x940 \tip6_dst_lookup_flow+0x88/0x190 \tudp_tunnel6_dst_lookup+0x2a7/0x4c0 \tvxlan_xmit_one+0xbde/0x4a50 [vxlan] \tvxlan_xmit+0x9ad/0xf20 [vxlan] \tdev_hard_start_xmit+0x10e/0x360 \t__dev_queue_xmit+0xf95/0x18c0 \tarp_solicit+0x4a2/0xe00 \tneigh_probe+0xaa/0xf0  While the first suspect is the dst_cache, explicitly tracking the dst owing the last device reference via probes proved such dst is held by the nexthop in the originating fib6_info.  Similar to commit f5b51fe804ec (\"ipv6: route: purge exception on removal\"), we need to explicitly release the originating fib info when disconnecting a to-be-removed device from a live ipv6 dst: move the fib6_info cleanup into ip6_dst_ifdown().  Tested running:  ./pmtu.sh cleanup_ipv6_exception  in a tight loop for more than 400 iterations with no spat, running an unpatched kernel  I observed a splat every ~10 iterations.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "6.12.3-1",
			"repository": [
				{
					"name": "trixie",
					"version": "6.12.9-1"
				}
			]
		}
	]
}

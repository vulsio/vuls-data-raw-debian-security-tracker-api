{
	"id": "CVE-2023-52874",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  x86/tdx: Zero out the missing RSI in TDX_HYPERCALL macro  In the TDX_HYPERCALL asm, after the TDCALL instruction returns from the untrusted VMM, the registers that the TDX guest shares to the VMM need to be cleared to avoid speculative execution of VMM-provided values.  RSI is specified in the bitmap of those registers, but it is missing when zeroing out those registers in the current TDX_HYPERCALL.  It was there when it was originally added in commit 752d13305c78 (\"x86/tdx: Expand __tdx_hypercall() to handle more arguments\"), but was later removed in commit 1e70c680375a (\"x86/tdx: Do not corrupt frame-pointer in __tdx_hypercall()\"), which was correct because %rsi is later restored in the \"pop %rsi\".  However a later commit 7a3a401874be (\"x86/tdx: Drop flags from __tdx_hypercall()\") removed that \"pop %rsi\" but forgot to add the \"xor %rsi, %rsi\" back.  Fix by adding it back.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "6.6.8-1",
			"repository": [
				{
					"name": "trixie",
					"version": "6.11.4-1"
				}
			]
		}
	]
}

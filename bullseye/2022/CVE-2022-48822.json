{
	"id": "CVE-2022-48822",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  usb: f_fs: Fix use-after-free for epfile  Consider a case where ffs_func_eps_disable is called from ffs_func_disable as part of composition switch and at the same time ffs_epfile_release get called from userspace. ffs_epfile_release will free up the read buffer and call ffs_data_closed which in turn destroys ffs->epfiles and mark it as NULL. While this was happening the driver has already initialized the local epfile in ffs_func_eps_disable which is now freed and waiting to acquire the spinlock. Once spinlock is acquired the driver proceeds with the stale value of epfile and tries to free the already freed read buffer causing use-after-free.  Following is the illustration of the race:        CPU1                                  CPU2     ffs_func_eps_disable    epfiles (local copy) \t\t\t\t\tffs_epfile_release \t\t\t\t\tffs_data_closed \t\t\t\t\tif (last file closed) \t\t\t\t\tffs_data_reset \t\t\t\t\tffs_data_clear \t\t\t\t\tffs_epfiles_destroy spin_lock dereference epfiles  Fix this races by taking epfiles local copy & assigning it under spinlock and if epfiles(local) is null then update it in ffs->epfiles then finally destroy it. Extending the scope further from the race, protecting the ep related structures, and concurrent accesses.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "5.10.103-1",
			"repository": [
				{
					"name": "bullseye-security",
					"version": "5.10.226-1"
				},
				{
					"name": "bullseye",
					"version": "5.10.223-1"
				}
			]
		}
	]
}

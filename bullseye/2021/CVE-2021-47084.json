{
	"id": "CVE-2021-47084",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  hamradio: defer ax25 kfree after unregister_netdev  There is a possible race condition (use-after-free) like below   (USE)                       |  (FREE) ax25_sendmsg                 |  ax25_queue_xmit             |   dev_queue_xmit             |    __dev_queue_xmit          |     __dev_xmit_skb           |      sch_direct_xmit         | ...       xmit_one               |        netdev_start_xmit     | tty_ldisc_kill         __netdev_start_xmit  |  mkiss_close          ax_xmit             |   kfree           ax_encaps          |                              |  Even though there are two synchronization primitives before the kfree: 1. wait_for_completion(&ax->dead). This can prevent the race with routines from mkiss_ioctl. However, it cannot stop the routine coming from upper layer, i.e., the ax25_sendmsg.  2. netif_stop_queue(ax->dev). It seems that this line of code aims to halt the transmit queue but it fails to stop the routine that already being xmit.  This patch reorder the kfree after the unregister_netdev to avoid the possible UAF as the unregister_netdev() is well synchronized and won't return if there is a running routine.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "5.10.92-1",
			"repository": [
				{
					"name": "bullseye",
					"version": "5.10.209-2"
				},
				{
					"name": "bullseye-security",
					"version": "5.10.205-2"
				}
			]
		}
	]
}

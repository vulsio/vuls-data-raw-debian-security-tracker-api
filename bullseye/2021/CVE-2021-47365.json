{
	"id": "CVE-2021-47365",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  afs: Fix page leak  There's a loop in afs_extend_writeback() that adds extra pages to a write we want to make to improve the efficiency of the writeback by making it larger.  This loop stops, however, if we hit a page we can't write back from immediately, but it doesn't get rid of the page ref we speculatively acquired.  This was caused by the removal of the cleanup loop when the code switched from using find_get_pages_contig() to xarray scanning as the latter only gets a single page at a time, not a batch.  Fix this by putting the page on a ref on an early break from the loop. Unfortunately, we can't just add that page to the pagevec we're employing as we'll go through that and add those pages to the RPC call.  This was found by the generic/074 test.  It leaks ~4GiB of RAM each time it is run - which can be observed with \"top\".",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "unimportant",
			"fixed_version": "0",
			"repository": [
				{
					"name": "bullseye-security",
					"version": "5.10.226-1"
				},
				{
					"name": "bullseye",
					"version": "5.10.223-1"
				}
			]
		}
	]
}

{
	"id": "CVE-2021-47012",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  RDMA/siw: Fix a use after free in siw_alloc_mr  Our code analyzer reported a UAF.  In siw_alloc_mr(), it calls siw_mr_add_mem(mr,..). In the implementation of siw_mr_add_mem(), mem is assigned to mr->mem and then mem is freed via kfree(mem) if xa_alloc_cyclic() failed. Here, mr->mem still point to a freed object. After, the execution continue up to the err_out branch of siw_alloc_mr, and the freed mr->mem is used in siw_mr_drop_mem(mr).  My patch moves \"mr->mem = mem\" behind the if (xa_alloc_cyclic(..)<0) {} section, to avoid the uaf.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "5.10.38-1",
			"repository": [
				{
					"name": "bullseye-security",
					"version": "5.10.226-1"
				},
				{
					"name": "bullseye",
					"version": "5.10.223-1"
				}
			]
		}
	]
}

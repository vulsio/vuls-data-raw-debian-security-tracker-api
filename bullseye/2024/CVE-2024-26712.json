{
	"id": "CVE-2024-26712",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  powerpc/kasan: Fix addr error caused by page alignment  In kasan_init_region, when k_start is not page aligned, at the begin of for loop, k_cur = k_start & PAGE_MASK is less than k_start, and then `va = block + k_cur - k_start` is less than block, the addr va is invalid, because the memory address space from va to block is not alloced by memblock_alloc, which will not be reserved by memblock_reserve later, it will be used by other places.  As a result, memory overwriting occurs.  for example: int __init __weak kasan_init_region(void *start, size_t size) { [...] \t/* if say block(dcd97000) k_start(feef7400) k_end(feeff3fe) */ \tblock = memblock_alloc(k_end - k_start, PAGE_SIZE); \t[...] \tfor (k_cur = k_start & PAGE_MASK; k_cur < k_end; k_cur += PAGE_SIZE) { \t\t/* at the begin of for loop \t\t * block(dcd97000) va(dcd96c00) k_cur(feef7000) k_start(feef7400) \t\t * va(dcd96c00) is less than block(dcd97000), va is invalid \t\t */ \t\tvoid *va = block + k_cur - k_start; \t\t[...] \t} [...] }  Therefore, page alignment is performed on k_start before memblock_alloc() to ensure the validity of the VA address.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "5.10.216-1",
			"repository": [
				{
					"name": "bullseye-security",
					"version": "5.10.223-1"
				},
				{
					"name": "bullseye",
					"version": "5.10.223-1"
				}
			]
		}
	]
}

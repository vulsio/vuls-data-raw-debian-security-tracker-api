{
	"id": "CVE-2024-35941",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  net: skbuff: add overflow debug check to pull/push helpers  syzbot managed to trigger following splat: BUG: KASAN: use-after-free in __skb_flow_dissect+0x4a3b/0x5e50 Read of size 1 at addr ffff888208a4000e by task a.out/2313 [..]   __skb_flow_dissect+0x4a3b/0x5e50   __skb_get_hash+0xb4/0x400   ip_tunnel_xmit+0x77e/0x26f0   ipip_tunnel_xmit+0x298/0x410   ..  Analysis shows that the skb has a valid ->head, but bogus ->data pointer.  skb->data gets its bogus value via the neigh layer, which does:  1556    __skb_pull(skb, skb_network_offset(skb));  ... and the skb was already dodgy at this point:  skb_network_offset(skb) returns a negative value due to an earlier overflow of skb->network_header (u16).  __skb_pull thus \"adjusts\" skb->data by a huge offset, pointing outside skb->head area.  Allow debug builds to splat when we try to pull/push more than INT_MAX bytes.  After this, the syzkaller reproducer yields a more precise splat before the flow dissector attempts to read off skb->data memory:  WARNING: CPU: 5 PID: 2313 at include/linux/skbuff.h:2653 neigh_connected_output+0x28e/0x400   ip_finish_output2+0xb25/0xed0   iptunnel_xmit+0x4ff/0x870   ipgre_xmit+0x78e/0xbb0",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "open",
			"urgency": "not yet assigned",
			"repository": [
				{
					"name": "bullseye-security",
					"version": "5.10.216-1"
				},
				{
					"name": "bullseye",
					"version": "5.10.209-2"
				}
			]
		}
	]
}

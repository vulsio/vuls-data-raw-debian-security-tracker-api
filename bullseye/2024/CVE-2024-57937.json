{
	"id": "CVE-2024-57937",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  mm: reinstate ability to map write-sealed memfd mappings read-only  Patch series \"mm: reinstate ability to map write-sealed memfd mappings read-only\".  In commit 158978945f31 (\"mm: perform the mapping_map_writable() check after call_mmap()\") (and preceding changes in the same series) it became possible to mmap() F_SEAL_WRITE sealed memfd mappings read-only.  Commit 5de195060b2e (\"mm: resolve faulty mmap_region() error path behaviour\") unintentionally undid this logic by moving the mapping_map_writable() check before the shmem_mmap() hook is invoked, thereby regressing this change.  This series reworks how we both permit write-sealed mappings being mapped read-only and disallow mprotect() from undoing the write-seal, fixing this regression.  We also add a regression test to ensure that we do not accidentally regress this in future.  Thanks to Julian Orth for reporting this regression.   This patch (of 2):  In commit 158978945f31 (\"mm: perform the mapping_map_writable() check after call_mmap()\") (and preceding changes in the same series) it became possible to mmap() F_SEAL_WRITE sealed memfd mappings read-only.  This was previously unnecessarily disallowed, despite the man page documentation indicating that it would be, thereby limiting the usefulness of F_SEAL_WRITE logic.  We fixed this by adapting logic that existed for the F_SEAL_FUTURE_WRITE seal (one which disallows future writes to the memfd) to also be used for F_SEAL_WRITE.  For background - the F_SEAL_FUTURE_WRITE seal clears VM_MAYWRITE for a read-only mapping to disallow mprotect() from overriding the seal - an operation performed by seal_check_write(), invoked from shmem_mmap(), the f_op->mmap() hook used by shmem mappings.  By extending this to F_SEAL_WRITE and critically - checking mapping_map_writable() to determine if we may map the memfd AFTER we invoke shmem_mmap() - the desired logic becomes possible.  This is because mapping_map_writable() explicitly checks for VM_MAYWRITE, which we will have cleared.  Commit 5de195060b2e (\"mm: resolve faulty mmap_region() error path behaviour\") unintentionally undid this logic by moving the mapping_map_writable() check before the shmem_mmap() hook is invoked, thereby regressing this change.  We reinstate this functionality by moving the check out of shmem_mmap() and instead performing it in do_mmap() at the point at which VMA flags are being determined, which seems in any case to be a more appropriate place in which to make this determination.  In order to achieve this we rework memfd seal logic to allow us access to this information using existing logic and eliminate the clearing of VM_MAYWRITE from seal_check_write() which we are performing in do_mmap() instead.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "open",
			"urgency": "not yet assigned",
			"repository": [
				{
					"name": "bullseye",
					"version": "5.10.223-1"
				},
				{
					"name": "bullseye-security",
					"version": "5.10.226-1"
				}
			]
		}
	]
}

{
	"id": "CVE-2024-38598",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  md: fix resync softlockup when bitmap size is less than array size  Is is reported that for dm-raid10, lvextend + lvchange --syncaction will trigger following softlockup:  kernel:watchdog: BUG: soft lockup - CPU#3 stuck for 26s! [mdX_resync:6976] CPU: 7 PID: 3588 Comm: mdX_resync Kdump: loaded Not tainted 6.9.0-rc4-next-20240419 #1 RIP: 0010:_raw_spin_unlock_irq+0x13/0x30 Call Trace:  <TASK>  md_bitmap_start_sync+0x6b/0xf0  raid10_sync_request+0x25c/0x1b40 [raid10]  md_do_sync+0x64b/0x1020  md_thread+0xa7/0x170  kthread+0xcf/0x100  ret_from_fork+0x30/0x50  ret_from_fork_asm+0x1a/0x30  And the detailed process is as follows:  md_do_sync  j = mddev->resync_min  while (j < max_sectors)   sectors = raid10_sync_request(mddev, j, &skipped)    if (!md_bitmap_start_sync(..., &sync_blocks))     // md_bitmap_start_sync set sync_blocks to 0     return sync_blocks + sectors_skippe;   // sectors = 0;   j += sectors;   // j never change  Root cause is that commit 301867b1c168 (\"md/raid10: check slab-out-of-bounds in md_bitmap_get_counter\") return early from md_bitmap_get_counter(), without setting returned blocks.  Fix this problem by always set returned blocks from md_bitmap_get_counter\"(), as it used to be.  Noted that this patch just fix the softlockup problem in kernel, the case that bitmap size doesn't match array size still need to be fixed.",
	"scope": "local",
	"packages": [
		{
			"name": "linux",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "5.10.221-1",
			"repository": [
				{
					"name": "bullseye",
					"version": "5.10.218-1"
				},
				{
					"name": "bullseye-security",
					"version": "5.10.223-1"
				}
			]
		}
	]
}

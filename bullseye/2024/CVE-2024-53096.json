{
	"id": "CVE-2024-53096",
	"description": "In the Linux kernel, the following vulnerability has been resolved:  mm: resolve faulty mmap_region() error path behaviour  The mmap_region() function is somewhat terrifying, with spaghetti-like control flow and numerous means by which issues can arise and incomplete state, memory leaks and other unpleasantness can occur.  A large amount of the complexity arises from trying to handle errors late in the process of mapping a VMA, which forms the basis of recently observed issues with resource leaks and observable inconsistent state.  Taking advantage of previous patches in this series we move a number of checks earlier in the code, simplifying things by moving the core of the logic into a static internal function __mmap_region().  Doing this allows us to perform a number of checks up front before we do any real work, and allows us to unwind the writable unmap check unconditionally as required and to perform a CONFIG_DEBUG_VM_MAPLE_TREE validation unconditionally also.  We move a number of things here:  1. We preallocate memory for the iterator before we call the file-backed    memory hook, allowing us to exit early and avoid having to perform    complicated and error-prone close/free logic. We carefully free    iterator state on both success and error paths.  2. The enclosing mmap_region() function handles the mapping_map_writable()    logic early. Previously the logic had the mapping_map_writable() at the    point of mapping a newly allocated file-backed VMA, and a matching    mapping_unmap_writable() on success and error paths.     We now do this unconditionally if this is a file-backed, shared writable    mapping. If a driver changes the flags to eliminate VM_MAYWRITE, however    doing so does not invalidate the seal check we just performed, and we in    any case always decrement the counter in the wrapper.     We perform a debug assert to ensure a driver does not attempt to do the    opposite.  3. We also move arch_validate_flags() up into the mmap_region()    function. This is only relevant on arm64 and sparc64, and the check is    only meaningful for SPARC with ADI enabled. We explicitly add a warning    for this arch if a driver invalidates this check, though the code ought    eventually to be fixed to eliminate the need for this.  With all of these measures in place, we no longer need to explicitly close the VMA on error paths, as we place all checks which might fail prior to a call to any driver mmap hook.  This eliminates an entire class of errors, makes the code easier to reason about and more robust.",
	"scope": "local",
	"packages": [
		{
			"name": "linux-6.1",
			"status": "resolved",
			"urgency": "not yet assigned",
			"fixed_version": "6.1.119-1~deb11u1",
			"repository": [
				{
					"name": "bullseye-security",
					"version": "6.1.119-1~deb11u1"
				}
			]
		},
		{
			"name": "linux",
			"status": "open",
			"urgency": "not yet assigned",
			"repository": [
				{
					"name": "bullseye-security",
					"version": "5.10.226-1"
				},
				{
					"name": "bullseye",
					"version": "5.10.223-1"
				}
			]
		}
	]
}
